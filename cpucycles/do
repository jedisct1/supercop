#!/bin/sh -e

okabi | (
  while read abi
  do

    rm -f cpucycles.o cpucycles.h
    
    (
      # try to keep better precision on top

      case "$abi" in
        ppc64*)
          # time base tends to be much too slow
          echo perfevent
          echo powerpccpuinfo
          echo powerpcmacos
          ;;
        ppc*)
          echo powerpccpuinfo
          echo powerpcmacos
          ;;
        amd64*)
          echo amd64rdpmc
          echo amd64tscfreq
          echo amd64cpuinfo
          echo amd64cpuspeed
          ;;
        x86*)
          echo x86tscfreq
          echo x86cpuinfo
          echo x86cpuspeed
          echo x86estimate
          ;;
        cell*)
          echo celllinux
          ;;
        sparc*)
          echo sparccpuinfo
          echo sparc32cpuinfo
          echo leoncpuinfo
          ;;
        mips*)
          echo mips
          ;;
        hppa*)
          echo hppapstat
          ;;
        alpha*)
          echo alpha
          ;;
        sgi*)
          echo sgi
          ;;
        arm*)
          echo arm1176
          echo cortex
          echo dev4ns
          ;;
        aarch64)
          echo armv8
          echo cortex
          echo apple # on m1 seems more precise than vct
          echo vct
          ;;
      esac

      # rdpmc
      echo amd64rdpmc

      # rdtsc
      echo amd64tscfreq
      echo amd64cpuinfo
      echo amd64cpuspeed
      echo x86tscfreq
      echo x86cpuinfo
      echo x86cpuspeed
      echo x86estimate

      # arm cycle counters
      echo armv8
      echo cortex
      echo arm1176

      # mach_absolute_time
      echo apple

      # powerpc time base
      echo powerpccpuinfo
      echo powerpcmacos

      # miscellaneous platforms
      echo ia64cpuinfo
      echo celllinux
      echo sparccpuinfo
      echo sparc32cpuinfo
      echo leoncpuinfo
      echo mips
      echo hppapstat
      echo alpha
      echo sgi
      echo riscv

      # semi-portable
      echo dev4ns
      echo perfevent

      # portable; often microsecond or worse
      echo monotoniccpuinfo
      echo monotonic
      echo gettimeofday
    ) | (
      while read n
      do
        okc-$abi | (
          while read c
          do
            echo "=== `date` === Trying $n.c with $c..." >&2
            rm -f test cpucycles-impl.o cpucycles-impl.h cpucycles-impl.c
            cp $n.c cpucycles-impl.c || continue
            cp $n.h cpucycles-impl.h || continue
            $c -c cpucycles-impl.c || continue
            $c -o test test.c cpucycles-impl.o || continue
            $CPUCYCLESWRAPPER $DEVICE ./test || continue
            echo "=== `date` === Success. Using $n.c." >&2
            mkdir -p lib/$abi
            mv cpucycles-impl.o lib/$abi/cpucycles.o
            okar-$abi cr lib/$abi/libcpucycles.a lib/$abi/cpucycles.o || continue
            ranlib lib/$abi/libcpucycles.a || :
            mkdir -p include/$abi
            mv cpucycles-impl.h include/$abi/cpucycles.h
            exit 0
          done
          exit 111
        ) && exit 0
      done
      exit 111
    ) || (
      echo ===== Giving up. >&2
      rm -f test cpucycles-impl.o cpucycles-impl.h cpucycles-impl.c
      exit 111
    ) || exit 0

  done
  exit 0
) || exit 111
